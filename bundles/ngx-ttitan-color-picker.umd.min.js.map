{"version":3,"sources":["ng://ngx-ttitan-color-picker/lib/ngx-ttitan-color-picker.service.ts","ng://ngx-ttitan-color-picker/lib/ngx-ttitan-color-picker-palette-list/ngx-ttitan-color-picker-palette-list.component.ts","ng://ngx-ttitan-color-picker/lib/ngx-ttitan-color-picker.component.ts","ng://ngx-ttitan-color-picker/lib/ngx-ttitan-color-picker-dragger.directive.ts","ng://ngx-ttitan-color-picker/lib/ngx-ttitan-color-picker-selector.directive.ts","ng://ngx-ttitan-color-picker/lib/ngx-ttitan-color-picker-input.directive.ts","ng://ngx-ttitan-color-picker/lib/ngx-ttitan-color-picker.module.ts"],"names":["NgxTTitanColorPickerService","fromEvent","document","this","fillBasePallets","prototype","saturationChange","percent","pickerComponent","hsva","saturation","x","value","y","dataToColor","hueChange","hue","Math","round","alphaChange","alpha","rgbaArr","hsvaToRgba","rgbaMaxArr","currentColor","currentColorMax","currentColorAlpha","currentColorAlphaZero","setInputValue","updateReturnColor","colorToData","color","detectColorType","parseRgbaColor","parseRgbColor","parseHslaColor","parseHslColor","parseHexColor","getPickerUuid","pickerId","i","pickerList","length","indexOf","push","fillValuesFromHsvaArr","hsvaArr","aus2","replace","split","rgbaToHsva","parseInt","hslaToHsva","aus","hexToHsva","H","S","V","A","f","p","q","t","lH","R","G","B","floor","hsvaToRgbaString","showAlpha","colorArr","join","pop","r","g","b","a","h","s","max","min","v","d","hsvaToHsla","l","hex","rgba","substring","parseFloat","toFixed","hsvaToHex","hA","toString","slice","validateColorFormat","format","validateHexFormat","validateRgbaFormat","isNaN","ausArr","alphaVal","map","val","apply","prepareReturnColor","preparePickerPallets","availPallets","customPallets","pickerPallets","pallets","forEach","palette","id","name","colors","Injectable","NgxTTitanColorPickerPaletteListComponent","EventEmitter","ngOnInit","closePalette","activePalette","selectPalette","_context","closePicker","colorSelected","change","emit","Component","args","selector","template","styles","Input","Output","NgxTTitanColorPickerComponent","colorPickerService","cdr","pickerShow","noHide","debug","outFormat","inputFormat","uuid","componentClick","$event","pickerOpen","_pickerConfig","path","pickerFound_1","every","item","classList","contains","validateInputParams","ngOnChanges","changes","_this","currentValue","previousValue","setTimeout","setDraggersToCurrentColor","openPicker","paletteList","detectChanges","options","allowedFormats","console","group","warn","groupEnd","filter","alphaFormats","inputColorChange","colorInit","oldColor","colorChange","pickerInput","mainColor","setDragger","huePicker","alphaPicker","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","HostListener","ViewChild","NgxTTitanColorPickerDraggerDirective","elRef","setPosition","direction","rect","nativeElement","getBoundingClientRect","style","top","left","Directive","ElementRef","NgxTTitanColorPickerSelectorDirective","el","onMouseDown","dragStart","eventsSubscibe","getPosition","ngOnDestroy","globalMouseMove","mouseMoveObservable","subscribe","event","globalMouseUp","mouseUpObservable","eventsUnSubscibe","unsubscribe","persent","dragger","position","getRect","width","pickerPad","height","cursorY","pageY","cursorX","pageX","elem","box","body","docEl","documentElement","scrollTop","window","pageYOffset","scrollLeft","pageXOffset","clientTop","clientLeft","exportAs","ContentChild","NgxTTitanColorPickerInputDirective","keyUp","inputValidate","res","inputChange","NgxTTitanColorPickerModule","NgModule","imports","CommonModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["import {EventEmitter, Injectable} from '@angular/core';\nimport {NgxTTitanColorPickerComponent} from \"./ngx-ttitan-color-picker.component\";\nimport {fromEvent, Observable} from \"rxjs/index\";\nimport {window} from \"rxjs/internal/operators\";\nimport {CustomPercent, HSVA, Palette} from \"./ngx-ttitan-color-picker.interface\";\n\n\n@Injectable()\nexport class NgxTTitanColorPickerService {\n\n  public pickerList: Array<string> = [];\n  public pallets: Array<Palette> = [];\n\n  public mouseMoveObservable: Observable<MouseEvent> = <Observable<MouseEvent>>fromEvent(document, 'mousemove');\n  public mouseUpObservable: Observable<MouseEvent> = <Observable<MouseEvent>>fromEvent(document, 'mouseup');\n  // public mouseMoveObservable: EventEmitter<MouseEvent> = new EventEmitter();\n  // public mouseUpObservable: EventEmitter<MouseEvent> = new EventEmitter();\n\n  constructor() {\n    this.fillBasePallets();\n    //\n    // document.addEventListener('mousemove', ($event) => {\n    //   this.mouseMoveObservable.emit(<MouseEvent>$event);\n    // });\n    // document.addEventListener('mouseup', ($event) => {\n    //   this.mouseUpObservable.emit(<MouseEvent>$event);\n    // });\n\n  }\n\n  saturationChange(percent: CustomPercent, pickerComponent: NgxTTitanColorPickerComponent ) {\n    pickerComponent.hsva.saturation = percent.x;\n    pickerComponent.hsva.value = (100 - percent.y);\n    this.dataToColor(pickerComponent);\n  }\n\n  hueChange(percent: CustomPercent, pickerComponent: NgxTTitanColorPickerComponent) {\n    pickerComponent.hsva.hue = Math.round(360 * percent.y / 100);\n    this.dataToColor(pickerComponent);\n  }\n\n  alphaChange(percent: CustomPercent, pickerComponent: NgxTTitanColorPickerComponent) {\n    pickerComponent.hsva.alpha = (100 - percent.y) / 100;\n    this.dataToColor(pickerComponent);\n  }\n\n  dataToColor(pickerComponent: NgxTTitanColorPickerComponent) {\n    let rgbaArr: Array<number> = this.hsvaToRgba(\n      pickerComponent.hsva.hue,\n      pickerComponent.hsva.saturation,\n      pickerComponent.hsva.value,\n      pickerComponent.hsva.alpha\n    );\n    let rgbaMaxArr: Array<number> = this.hsvaToRgba(\n      pickerComponent.hsva.hue,\n      100,\n      100,\n      pickerComponent.hsva.alpha\n    );\n\n    pickerComponent.currentColor = 'rgb(' + rgbaArr[0] + ',' + rgbaArr[1] + ',' + rgbaArr[2] + ')';\n    pickerComponent.currentColorMax = 'rgba(' + rgbaMaxArr[0] + ',' + rgbaMaxArr[1] + ',' + rgbaMaxArr[2] + ',' + rgbaMaxArr[3] + ')';\n    pickerComponent.currentColorAlpha = 'rgba(' + rgbaArr[0] + ',' + rgbaArr[1] + ',' + rgbaArr[2] + ',' + rgbaArr[3] + ')';\n    pickerComponent.currentColorAlphaZero = 'rgba(' + rgbaArr[0] + ',' + rgbaArr[1] + ',' + rgbaArr[2] + ',0)';\n\n    pickerComponent.setInputValue();\n    pickerComponent.updateReturnColor();\n\n\n  }\n\n  colorToData(color: string, pickerComponent: NgxTTitanColorPickerComponent) {\n    switch (this.detectColorType(color)) {\n      case \"rgba\": this.parseRgbaColor(color, pickerComponent); break;\n      case \"rgb\": this.parseRgbColor(color, pickerComponent); break;\n      case \"hsla\": this.parseHslaColor(color, pickerComponent); break;\n      case \"hsl\": this.parseHslColor(color, pickerComponent); break;\n      case \"hex6\": this.parseHexColor(color, pickerComponent); break;\n      case \"hex8\": this.parseHexColor(color, pickerComponent); break;\n    }\n    this.dataToColor(pickerComponent);\n  }\n\n  getPickerUuid() {\n    let pickerId = '';\n    for(let i = 0; i < 1000; i++) {\n      pickerId = 'picker-' + this.pickerList.length + '-' + i;\n      if(this.pickerList.indexOf(pickerId) === -1 ) {\n        this.pickerList.push(pickerId);\n        return pickerId;\n      }\n    }\n\n  }\n\n\n  detectColorType(color: string): string {\n    if(color.indexOf('rgba') !== -1) {\n      return 'rgba';\n    } else if(color.indexOf('rgb') !== -1) {\n      return 'rgb';\n    } else if(color.indexOf('hsla') !== -1) {\n      return 'hsla';\n    } else if(color.indexOf('hsl') !== -1) {\n      return 'hsl';\n    } else if (color.indexOf('#') !== -1 && (color.length == 4 || color.length == 7)){\n      return 'hex6';\n    } else if (color.indexOf('#') !== -1 && color.length == 9){\n      return 'hex8';\n    } else {\n      return 'undefined';\n    }\n  }\n\n\n  fillValuesFromHsvaArr(hsvaArr: Array<number>, pickerComponent: NgxTTitanColorPickerComponent) {\n    pickerComponent.hsva.hue = hsvaArr[0];\n    pickerComponent.hsva.saturation = hsvaArr[1];\n    pickerComponent.hsva.value = hsvaArr[2];\n    pickerComponent.hsva.alpha = hsvaArr[3];\n  }\n\n\n  parseRgbaColor(color, pickerComponent: NgxTTitanColorPickerComponent) {\n    let aus = color.replace('rgba(', '').replace(')', '');\n    let aus2 = aus.split(',');\n    if(aus2.length == 4) {\n      this.fillValuesFromHsvaArr(\n        this.rgbaToHsva(\n          parseInt(aus2[0]),\n          parseInt(aus2[1]),\n          parseInt(aus2[2]),\n          parseInt(aus2[3]),\n        ),\n        pickerComponent\n      );\n    }\n  }\n\n  parseRgbColor(color, pickerComponent: NgxTTitanColorPickerComponent) {\n    let aus = color.replace('rgb(', '').replace(')', '');\n    let aus2 = aus.split(',');\n    if(aus2.length == 3) {\n      this.fillValuesFromHsvaArr(\n        this.rgbaToHsva(\n          parseInt(aus2[0]),\n          parseInt(aus2[1]),\n          parseInt(aus2[2]),\n          1\n        ),\n        pickerComponent\n      );\n    }\n  }\n\n  parseHslaColor(color, pickerComponent: NgxTTitanColorPickerComponent) {\n    let aus = color.replace('hsla(', '').replace(')', '').replace('%', '');\n    let aus2 = aus.split(',');\n    if(aus2.length == 4) {\n      this.fillValuesFromHsvaArr(\n        this.hslaToHsva(\n          parseInt(aus2[0]),\n          parseInt(aus2[1]),\n          parseInt(aus2[2]),\n          parseInt(aus2[3]),\n        ),\n        pickerComponent\n      );\n    }\n  }\n\n  parseHslColor(color, pickerComponent: NgxTTitanColorPickerComponent) {\n    let aus = color.replace('hsl(', '').replace(')', '').replace('%', '');\n    let aus2 = aus.split(',');\n    if(aus2.length == 3) {\n      this.fillValuesFromHsvaArr(\n        this.hslaToHsva(\n          parseInt(aus2[0]),\n          parseInt(aus2[1]),\n          parseInt(aus2[2]),\n          1\n        ),\n        pickerComponent\n      );\n    }\n  }\n\n  parseHexColor(color, pickerComponent: NgxTTitanColorPickerComponent) {\n    let aus = color.replace('#', '');\n    this.fillValuesFromHsvaArr(\n      this.hexToHsva(aus),\n      pickerComponent\n    );\n  }\n\n\n\n  hsvaToRgba(H, S, V, A): Array<number> {\n    let f , p, q , t, lH, R, G, B;\n\n    H = (H < 360) ? H : 359;\n    S = S / 100;\n    V = V / 100;\n\n    lH = Math.floor(H / 60);\n\n    f = H/60 - lH;\n\n    p = V * (1 - S);\n\n    q = V *(1 - S*f);\n\n    t = V* (1 - (1-f)* S);\n\n    switch (lH){\n      case 0: R = V; G = t; B = p; break;\n      case 1: R = q; G = V; B = p; break;\n      case 2: R = p; G = V; B = t; break;\n      case 3: R = p; G = q; B = V; break;\n      case 4: R = t; G = p; B = V; break;\n      case 5: R = V; G = p; B = q; break;\n    }\n\n    return [Math.round(R*255), Math.round(G*255), Math.round(B*255), A];\n  }\n\n  hsvaToRgbaString(H, S, V, A, showAlpha: boolean = false): string {\n    let colorArr: Array<number> = this.hsvaToRgba(H, S, V, A);\n\n    if(showAlpha) {\n      return 'rgba(' + colorArr.join(',') + ')';\n    }\n\n    colorArr.pop();\n    return 'rgb(' + colorArr.join(',') + ')';\n\n  }\n\n  rgbaToHsva(r, g, b, a): Array<number> {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    let max = Math.max(r, g, b), min = Math.min(r, g, b);\n    let h, s, v = max;\n    let d = max - min;\n    s = max == 0 ? 0 : d / max;\n\n    if (max == min) {\n      h = 0;\n    } else {\n      switch (max) {\n        case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n        case g: h = (b - r) / d + 2; break;\n        case b: h = (r - g) / d + 4; break;\n      }\n\n      h /= 6;\n    }\n\n\n    return [\n      h * 360,\n      s * 100,\n      v * 100,\n      a\n    ];\n  }\n\n  hsvaToHsla(h, s, v, a): Array<number>{\n    s /= 100;\n    v /= 100;\n    return[\n      Math.round(h),\n      Math.round((s*v/((h=(2-s)*v)<1?h:2-h)) * 100),\n      Math.round((h/2) * 100),\n      a\n    ]\n  }\n\n  hslaToHsva (h, s, l, a): Array<number>{\n    s /= 100;\n    l /= 100;\n    s*=l<.5?l:1-l;\n    return[\n      h,\n      Math.round((2*s/(l+s)) * 100),\n      Math.round((l+s) * 100),\n      a\n    ]\n  }\n\n  hexToHsva(hex: string): Array<number> {\n\n    let rgba = [0,0,0,1];\n    if (hex.length == 6) {\n      rgba = [\n        parseInt(hex.substring(0, 2), 16),\n        parseInt(hex.substring(2, 4), 16),\n        parseInt(hex.substring(4, 6), 16),\n        1\n      ];\n    } else if (hex.length == 3) {\n      rgba = [\n        parseInt(hex.substring(0, 1) + hex.substring(0, 1), 16),\n        parseInt(hex.substring(1, 2) + hex.substring(1, 2), 16),\n        parseInt(hex.substring(2, 3) + hex.substring(2, 3), 16),\n        1\n      ]\n    } else if (hex.length == 8) {\n      rgba = [\n        parseInt(hex.substring(0, 2), 16),\n        parseInt(hex.substring(2, 4), 16),\n        parseInt(hex.substring(4, 6), 16),\n        parseFloat((parseInt(hex.substring(6, 8), 16) / 255).toFixed(2))\n      ]\n    }\n    return this.rgbaToHsva(rgba[0], rgba[1], rgba[2], rgba[3]);\n\n  }\n\n  hsvaToHex(H, S, V, A, showAlpha: boolean = true): string {\n    let rgba: Array<number> = this.hsvaToRgba(H, S, V, A);\n\n    let hA: string = ((showAlpha) ? (rgba[3] * 255).toString(16).substring(0,2) : '');\n\n    if(showAlpha) {\n      hA = (hA.length == 1) ? hA + hA : hA;\n    }\n    return '#' +\n      ((rgba[2] | rgba[1] << 8 | rgba[0] << 16) | 1 << 24).toString(16).slice(1) +\n      hA;\n  }\n\n\n  validateColorFormat(value: string, format: string): string {\n    switch (format) {\n      case \"hex6\": return this.validateHexFormat(value);\n      case \"hex8\": return this.validateHexFormat(value, true);\n      case \"rgb\": return this.validateRgbaFormat(value);\n      case \"rgba\": return this.validateRgbaFormat(value, true);\n      // case \"hsl\": return this.validateHexFormat(value);\n      // case \"hsla\": return this.validateHexFormat(value);\n    }\n    return 'notValid';\n  }\n\n  validateHexFormat(value: string, alpha: boolean = false): string {\n    let result = 'notValid';\n    value = value.replace('#', '');\n    if(!alpha) {\n      if(value.length === 6) {\n        if(!isNaN(parseInt(value, 16))) {\n          return '#' + value;\n        }\n      }\n    } else {\n      if(value.length === 8) {\n        if(!isNaN(parseInt(value, 16))) {\n          return '#' + value;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  validateRgbaFormat(value: string, alpha: boolean = false): string {\n    let result = 'notValid';\n    value = value.replace(/[^0-9\\,]+/g, \"\");\n    let ausArr: Array<string | number> = value.split(',');\n    let alphaVal: string | number = '';\n\n    if(!alpha) {\n      if(ausArr.length == 3) {\n        ausArr = ausArr.map(function(val: string){return parseInt(val)});\n        if(\n          Math.max.apply(null, ausArr) <= 255 &&\n          Math.min.apply(null, ausArr) >= 0\n        ) {\n          return 'rgb(' + ausArr.join(',') + ')';\n        }\n      }\n    } else {\n      if(ausArr.length == 4) {\n        alphaVal = parseFloat(<string>ausArr.pop());\n        ausArr = ausArr.map(function(val: string){return parseInt(val)});\n        if(\n          Math.max.apply(null, ausArr) <= 255 &&\n          Math.min.apply(null, ausArr) >= 0 &&\n          alphaVal >= 0 && alphaVal <= 1\n        ) {\n          ausArr.push(alphaVal);\n          return 'rgba(' + ausArr.join(',') + ')';\n        }\n      }\n    }\n\n    return result;\n  }\n\n  prepareReturnColor(hsva: HSVA, format: string): string {\n    switch (format) {\n      case \"hex6\": return this.hsvaToHex(hsva.hue, hsva.saturation, hsva.value, 1, false);\n      case \"hex8\": return this.hsvaToHex(hsva.hue, hsva.saturation, hsva.value, hsva.alpha, true);\n      case \"rgb\": return this.hsvaToRgbaString(hsva.hue, hsva.saturation, hsva.value, 1);\n      case \"rgba\": return this.hsvaToRgbaString(hsva.hue, hsva.saturation, hsva.value, hsva.alpha, true);\n    }\n    return this.hsvaToHex(hsva.hue, hsva.saturation, hsva.value, 1, false);\n  }\n\n  preparePickerPallets(availPallets: Array<string> = [], customPallets: Array<Palette> = [], pickerComponent: NgxTTitanColorPickerComponent) {\n    pickerComponent.pickerPallets = [];\n    this.pallets.forEach((palette) => {\n      if(availPallets.indexOf(palette.id) !== -1) {\n        pickerComponent.pickerPallets.push(palette);\n      }\n    });\n    customPallets.forEach((palette) => {\n      pickerComponent.pickerPallets.push(palette);\n    });\n  }\n\n  fillBasePallets() {\n    this.pallets.push({\n      id: 'polaris',\n      name: 'Polaris',\n      colors: [\n        '#F9FAFB', '#F4F6F8', '#DFE3E8', '#C4CDD5',\n        '#919EAB', '#637381', '#454F5B', '#212B36',\n        '#B3B5CB', '#43467F', '#1C2260', '#00044C',\n        '#F6F0FD', '#E3D0FF', '#9C6ADE', '#50248F', '#230051',\n        '#F4F5FA', '#B3BCF5', '#5C6AC4', '#202E78', '#000639',\n        '#EBF5FA', '#B4E1FA', '#007ACE', '#084E8A', '#001429',\n        '#E0F5F5', '#B7ECEC', '#47C1BF', '#00848E', '#003135',\n        '#E3F1DF', '#BBE5B3', '#50B83C', '#108043', '#173630',\n        '#FCF1CD', '#FFEA8A', '#EEC200', '#9C6F19', '#573B00',\n        '#FCEBDB', '#FFC58B', '#F49342', '#C05717', '#4A1504',\n        '#FBEAE5', '#FEAD9A', '#DE3618', '#BF0711', '#330101',\n      ]\n    });\n    this.pallets.push({\n      id: 'material',\n      name: 'Material',\n      colors: [\n        '#ffebee', '#ffcdd2', '#ef9a9a', '#e57373', '#ef5350', '#f44336', '#e53935', '#d32f2f', '#c62828', '#b71c1c', '#ff8a80', '#ff5252', '#ff1744', '#d50000',\n        '#fce4ec', '#f8bbd0', '#f48fb1', '#f06292', '#ec407a', '#e91e63', '#d81b60', '#c2185b', '#ad1457', '#880e4f', '#ff80ab', '#ff4081', '#f50057', '#c51162',\n        '#f3e5f5', '#e1bee7', '#ce93d8', '#ba68c8', '#ab47bc', '#9c27b0', '#8e24aa', '#7b1fa2', '#6a1b9a', '#4a148c', '#ea80fc', '#e040fb', '#d500f9', '#aa00ff',\n        '#ede7f6', '#d1c4e9', '#b39ddb', '#9575cd', '#7e57c2', '#673ab7', '#5e35b1', '#512da8', '#4527a0', '#311b92', '#b388ff', '#7c4dff', '#651fff', '#6200ea',\n        '#e8eaf6', '#c5cae9', '#9fa8da', '#7986cb', '#5c6bc0', '#3f51b5', '#3949ab', '#303f9f', '#283593', '#1a237e', '#8c9eff', '#536dfe', '#3d5afe', '#304ffe',\n        '#e3f2fd', '#bbdefb', '#90caf9', '#64b5f6', '#42a5f5', '#2196f3', '#1e88e5', '#1976d2', '#1565c0', '#0d47a1', '#82b1ff', '#448aff', '#2979ff', '#2962ff',\n        '#e1f5fe', '#b3e5fc', '#81d4fa', '#4fc3f7', '#29b6f6', '#03a9f4', '#039be5', '#0288d1', '#0277bd', '#01579b', '#80d8ff', '#40c4ff', '#00b0ff', '#0091ea',\n        '#e0f7fa', '#b2ebf2', '#80deea', '#4dd0e1', '#26c6da', '#00bcd4', '#00acc1', '#0097a7', '#00838f', '#006064', '#84ffff', '#18ffff', '#00e5ff', '#00b8d4',\n        '#e0f2f1', '#b2dfdb', '#80cbc4', '#4db6ac', '#26a69a', '#009688', '#00897b', '#00796b', '#00695c', '#004d40', '#a7ffeb', '#64ffda', '#1de9b6', '#00bfa5',\n        '#e8f5e9', '#c8e6c9', '#a5d6a7', '#81c784', '#66bb6a', '#4caf50', '#43a047', '#388e3c', '#2e7d32', '#1b5e20', '#b9f6ca', '#69f0ae', '#00e676', '#00c853',\n        '#f1f8e9', '#dcedc8', '#c5e1a5', '#aed581', '#9ccc65', '#8bc34a', '#7cb342', '#689f38', '#558b2f', '#33691e', '#ccff90', '#b2ff59', '#76ff03', '#64dd17',\n        '#f9fbe7', '#f0f4c3', '#e6ee9c', '#dce775', '#d4e157', '#cddc39', '#c0ca33', '#afb42b', '#9e9d24', '#827717', '#f4ff81', '#eeff41', '#c6ff00', '#aeea00',\n        '#fffde7', '#fff9c4', '#fff59d', '#fff176', '#ffee58', '#ffeb3b', '#fdd835', '#fbc02d', '#f9a825', '#f57f17', '#ffff8d', '#ffff00', '#ffea00', '#ffd600',\n        '#fff8e1', '#ffecb3', '#ffe082', '#ffd54f', '#ffca28', '#ffc107', '#ffb300', '#ffa000', '#ff8f00', '#ff6f00', '#ffe57f', '#ffd740', '#ffc400', '#ffab00',\n        '#fff3e0', '#ffe0b2', '#ffcc80', '#ffb74d', '#ffa726', '#ff9800', '#fb8c00', '#f57c00', '#ef6c00', '#e65100', '#ffd180', '#ffab40', '#ff9100', '#ff6d00',\n        '#fbe9e7', '#ffccbc', '#ffab91', '#ff8a65', '#ff7043', '#ff5722', '#f4511e', '#e64a19', '#d84315', '#bf360c', '#ff9e80', '#ff6e40', '#ff3d00', '#dd2c00',\n        '#efebe9', '#d7ccc8', '#bcaaa4', '#a1887f', '#8d6e63', '#795548', '#6d4c41', '#5d4037', '#4e342e', '#3e2723',\n        '#fafafa', '#f5f5f5', '#eeeeee', '#e0e0e0', '#bdbdbd', '#9e9e9e', '#757575', '#616161', '#424242', '#212121',\n        '#eceff1', '#cfd8dc', '#b0bec5', '#90a4ae', '#78909c', '#607d8b', '#546e7a', '#455a64', '#37474f', '#263238',\n      ]\n    });\n  }\n\n\n\n\n\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {ColorPickerComponent, Palette} from \"../ngx-ttitan-color-picker.interface\";\n\n@Component({\n  selector: 'lib-ngx-ttitan-color-picker-palette-list',\n  template: `<div class=\"picker-palette-wrapper\" *ngIf=\"pallets.length > 0\">\n  <div class=\"palette-links\">\n    <div\n      class=\"palette-link\"\n      *ngFor=\"let palette of pallets\"\n      [ngClass]=\"{'selected': (activePalette !== null && activePalette.id == palette.id)}\"\n      (click)=\"selectPalette(palette)\"\n    >\n      {{palette.name}}\n    </div>\n  </div>\n  <div class=\"palette-picker-holder\" *ngIf=\"activePalette !== null && activePalette.colors.length > 0\">\n    <div\n      class=\"palette-color\"\n      *ngFor=\"let color of activePalette.colors\"\n      [ngStyle]=\"{\n        backgroundColor: color\n      }\"\n      (click)=\"colorSelected(color)\"\n    >\n\n    </div>\n  </div>\n</div>\n`,\n  styles: [`:host .picker-palette-wrapper .palette-links{display:flex;flex-wrap:wrap;margin-bottom:5px}:host .picker-palette-wrapper .palette-links .palette-link{margin-right:5px;border-radius:3px;padding:2px 4px;border:1px solid #ddd;text-transform:uppercase;font-size:10px;font-family:-apple-system,BlinkMacSystemFont,San Francisco,Roboto,Segoe UI,Helvetica Neue,sans-serif;font-weight:600;background-color:#fff;cursor:pointer}:host .picker-palette-wrapper .palette-links .palette-link.selected{background-color:#5e6bc5;color:#fff}:host .picker-palette-wrapper .palette-picker-holder{height:165px;display:flex;flex-wrap:wrap;align-items:flex-start;justify-content:flex-start;align-content:baseline}:host .picker-palette-wrapper .palette-picker-holder .palette-color{cursor:pointer;width:10px;height:10px}`]\n})\nexport class NgxTTitanColorPickerPaletteListComponent implements OnInit {\n\n  @Input('pallets') public pallets: Array<Palette> = [];\n  @Input('context') public _context: ColorPickerComponent;\n  @Output('change') public change: EventEmitter<string> = new EventEmitter<string>();\n\n  public activePalette: Palette = null;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  closePalette() {\n    this.activePalette = null;\n  }\n\n  selectPalette(palette: Palette) {\n    this._context.closePicker();\n    if(\n      this.activePalette == null\n    ) {\n      this.activePalette = palette;\n    } else if (this.activePalette.id !== palette.id) {\n      this.activePalette = palette;\n    }\n\n  }\n\n  colorSelected(color) {\n    this.change.emit(color);\n  }\n\n}\n","import {\n  ChangeDetectionStrategy, ChangeDetectorRef, Component,\n  EventEmitter,\n  HostListener, Input, OnChanges, OnInit,\n  Output, SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport {NgxTTitanColorPickerSelectorDirective} from \"./ngx-ttitan-color-picker-selector.directive\";\nimport {NgxTTitanColorPickerService} from \"./ngx-ttitan-color-picker.service\";\nimport {NgxTTitanColorPickerInputDirective} from \"./ngx-ttitan-color-picker-input.directive\";\nimport {NgxTTitanColorPickerPaletteListComponent} from \"./ngx-ttitan-color-picker-palette-list/ngx-ttitan-color-picker-palette-list.component\";\nimport {HSVA, Palette, PickerConfig, PickerOptions} from \"./ngx-ttitan-color-picker.interface\";\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'lib-ngx-ttitan-color-picker',\n  template: `<div\r\n  class=\"ngx-ttitan-color-picker-wrapper\"\r\n>\r\n\r\n  <div class=\"picker-input-wrapper\">\r\n    <div\r\n      [ngStyle]=\"{backgroundColor: color}\"\r\n      class=\"debug-output\"\r\n      *ngIf=\"_pickerConfig.debug\"\r\n    >\r\n      {{color}}\r\n    </div>\r\n    <div class=\"picker-input-label\" *ngIf=\"title !== ''\">\r\n      <label [for]=\"uuid\" >{{title}}</label>\r\n    </div>\r\n    <div class=\"picker-input-holder\">\r\n      <div class=\"picker-color\" [ngStyle]=\"{background: currentColorAlpha}\">\r\n\r\n      </div>\r\n      <div class=\"picker-input\">\r\n        <input\r\n          libNgxTTitanColorPickerInput\r\n          #pickerInput=\"libNgxTTitanColorPickerInput\"\r\n          (inputChange)=\"inputColorChange($event)\"\r\n          [format]=\"_pickerConfig.inputFormat\"\r\n          [id]=\"uuid\"\r\n          type=\"text\"\r\n          (focus)=\"openPicker()\"\r\n        />\r\n      </div>\r\n      <!--<div class=\"picker-save-sign\">-->\r\n      <!--S-->\r\n      <!--</div>-->\r\n    </div>\r\n\r\n  </div>\r\n  <div class=\"ngx-ttitan-color-picker\" [ngClass]=\"{'no-alpha': !_pickerConfig.alpha, 'open': pickerOpen}\">\r\n    <div class=\"ngx-ttitan-color-picker__MainColor\">\r\n      <div class=\"ngx-ttitan-color-picker__ColorLayer\" [ngStyle]=\"{backgroundColor: currentColorMax}\" ></div>\r\n      <div class=\"ngx-ttitan-color-picker__Slidable\"\r\n           libNgxTTitanColorPickerSelector\r\n           #mainColor=\"libNgxTTitanColorPickerSelector\"\r\n           [context]=\"this\"\r\n           (change)=\"colorPickerService.saturationChange($event, this)\"\r\n      >\r\n        <div class=\"ngx-ttitan-color-picker__Dragger\"\r\n             libNgxTTitanColorPickerDragger\r\n             [context]=\"this\"\r\n             style=\"transform: translate3d(0px, 0px, 0px);\"\r\n        ></div>\r\n      </div>\r\n    </div>\r\n    <div class=\"ngx-ttitan-color-picker__HuePicker\">\r\n      <div class=\"ngx-ttitan-color-picker__Slidable\"\r\n           libNgxTTitanColorPickerSelector\r\n           #huePicker=\"libNgxTTitanColorPickerSelector\"\r\n           (change)=\"colorPickerService.hueChange($event, this)\"\r\n           [direction]=\"'vertical'\"\r\n           [context]=\"this\"\r\n      >\r\n        <div class=\"ngx-ttitan-color-picker__Dragger\"\r\n             libNgxTTitanColorPickerDragger\r\n             [pickerPad]=\"0\"\r\n             style=\" transform: translate3d(0px, 0px, 0px);\"\r\n             [context]=\"this\"\r\n        ></div>\r\n      </div>\r\n    </div>\r\n    <div class=\"ngx-ttitan-color-picker__AlphaPicker\" *ngIf=\"_pickerConfig.alpha === true\">\r\n      <div class=\"ngx-ttitan-color-picker__ColorLayer\"\r\n           [ngStyle]=\"{background: 'linear-gradient(to top, ' + currentColorAlphaZero + '  18px, ' + currentColor + ' calc(100% - 18px)'}\"\r\n      ></div>\r\n      <div class=\"ngx-ttitan-color-picker__Slidable\"\r\n           libNgxTTitanColorPickerSelector\r\n           #alphaPicker=\"libNgxTTitanColorPickerSelector\"\r\n           (change)=\"colorPickerService.alphaChange($event, this)\"\r\n           [direction]=\"'vertical'\"\r\n           [context]=\"this\"\r\n      >\r\n        <div class=\"ngx-ttitan-color-picker__Dragger\"\r\n             libNgxTTitanColorPickerDragger\r\n             [pickerPad]=\"0\" style=\" transform: translate3d(0px, 0px, 0px);\"\r\n             [context]=\"this\"\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <lib-ngx-ttitan-color-picker-palette-list\r\n    (change)=\"inputColorChange($event)\"\r\n    [pallets]=\"pickerPallets\"\r\n    [context]=\"this\"\r\n  ></lib-ngx-ttitan-color-picker-palette-list>\r\n</div>\r\n\r\n`,\n  styles: [`:host *,:host :after,:host :before{box-sizing:border-box}:host .debug-output{width:100%;height:20px}:host .picker-input-wrapper{margin-bottom:6px}:host .picker-input-wrapper .picker-input-label{margin-bottom:6px}:host .picker-input-wrapper .picker-input-label label{text-transform:uppercase;font-weight:600}:host .picker-input-wrapper .picker-input-holder{display:flex;height:33px;border:1px solid #bbb;overflow:hidden;border-radius:3px;background-color:#eee}:host .picker-input-wrapper .picker-input-holder .picker-color{flex:0 0 31px;background-color:#ff0300}:host .picker-input-wrapper .picker-input-holder .picker-input{flex:auto;background-color:transparent}:host .picker-input-wrapper .picker-input-holder .picker-input input{background-color:transparent;color:#272727;font-family:monospace;font-size:14px;border:none;outline:0;padding:8px 2px 8px 8px;width:100%}:host .picker-input-wrapper .picker-input-holder .picker-save-sign{flex:0 0 31px;line-height:33px;text-align:center}:host .ngx-ttitan-color-picker{max-height:0;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:flex;transition:max-height .3s}:host .ngx-ttitan-color-picker.open{margin-bottom:5px;max-height:165px}:host .ngx-ttitan-color-picker__ColorLayer{position:absolute;z-index:10;top:0;left:0;height:100%;width:100%;box-shadow:inset 0 0 2px 0 rgba(0,0,0,.5);pointer-events:none}:host .ngx-ttitan-color-picker__Slidable{height:100%;width:100%;cursor:pointer}:host .ngx-ttitan-color-picker__Dragger{position:relative;z-index:30;bottom:.9rem;-webkit-transform:none;transform:none;height:18px;width:18px;margin:0 auto;-webkit-backface-visibility:hidden;backface-visibility:hidden;will-change:transform;background:0 0;border:3px solid #fff;box-shadow:0 0 0 1px rgba(6,44,82,.1),0 2px 16px rgba(33,43,54,.08),inset 0 0 0 1px rgba(6,44,82,.1),0 2px 16px rgba(33,43,54,.08);border-radius:50%;pointer-events:none;touch-action:none}:host .ngx-ttitan-color-picker__MainColor{background-image:linear-gradient(45deg,#dfe3e8 25%,transparent 0),linear-gradient(-45deg,#dfe3e8 25%,transparent 0),linear-gradient(45deg,transparent 75%,#dfe3e8 0),linear-gradient(-45deg,transparent 75%,#dfe3e8 0);background-size:1.6rem 1.6rem;background-position:0 0,0 .8rem,.8rem -.8rem,-.8rem 0;position:relative;overflow:hidden;flex:auto;border-radius:4px;cursor:pointer}:host .ngx-ttitan-color-picker__MainColor .ngx-ttitan-color-picker__ColorLayer{box-shadow:inset 0 0 0 1px rgba(6,44,82,.1),0 2px 16px rgba(33,43,54,.08);border-radius:4px}:host .ngx-ttitan-color-picker__MainColor .ngx-ttitan-color-picker__Dragger{right:.9rem;margin:0}:host .ngx-ttitan-color-picker__MainColor:after,:host .ngx-ttitan-color-picker__MainColor:before{content:\"\";position:absolute;z-index:20;top:0;left:0;display:block;height:100%;width:100%;pointer-events:none;border-radius:3px}:host .ngx-ttitan-color-picker__MainColor:before{background:linear-gradient(90deg,#fff,transparent)}:host .ngx-ttitan-color-picker__MainColor:after{background-image:linear-gradient(0deg,#000,transparent);box-shadow:inset 0 0 0 1px rgba(6,44,82,.1),0 2px 16px rgba(33,43,54,.08)}:host .ngx-ttitan-color-picker__AlphaPicker,:host .ngx-ttitan-color-picker__HuePicker{position:relative;overflow:hidden;height:165px;width:24px;flex:0 0 24px;margin-left:.8rem;border-width:3px;border-radius:8rem;padding:13px 0}:host .ngx-ttitan-color-picker__HuePicker{background:linear-gradient(to bottom,red 0,#ff0 21%,#0f0 33%,#0ff 50%,#00f 67%,#f0f 83%,red 100%);box-shadow:inset 0 0 2px 0 rgba(0,0,0,.5)}:host .ngx-ttitan-color-picker__AlphaPicker{background-image:linear-gradient(45deg,#dfe3e8 25%,transparent 0),linear-gradient(-45deg,#dfe3e8 25%,transparent 0),linear-gradient(45deg,transparent 75%,#dfe3e8 0),linear-gradient(-45deg,transparent 75%,#dfe3e8 0);background-size:1.6rem 1.6rem;background-position:0 0,0 .8rem,.8rem -.8rem,-.8rem 0}:host .ngx-ttitan-color-picker__AlphaPicker .ngx-ttitan-color-picker__ColorLayer{border-radius:8rem}:host .ngx-ttitan-color-picker.no-alpha .ngx-ttitan-color-picker__MainColor{width:200px}`],\n})\nexport class NgxTTitanColorPickerComponent implements OnInit, OnChanges {\n\n  @HostListener('click', ['$event']) componentClick($event) {\n    if(!this.pickerOpen) {\n      return;\n    }\n    if(this._pickerConfig.noHide) {\n      return;\n    }\n    if(typeof $event.path !== \"undefined\") {\n      let pickerFound = false;\n      $event.path.every(function(item) {\n        if(\n          typeof item.classList !== \"undefined\"\n        ) {\n          if(\n            item.classList.contains('picker-input-holder') ||\n            item.classList.contains('ngx-ttitan-color-picker')\n          ) {\n            pickerFound = true;\n            return false;\n          }\n        }\n\n        return true;\n      });\n\n      if(!pickerFound) {\n\n        this.closePicker();\n      }\n\n    }\n  }\n\n  @Input('options') public options: PickerOptions = {};\n  @Input('color') public color: string = '#ffffff';\n  @Input('title') public title: string = '';\n  @Output('colorChange') public colorChange: EventEmitter<string> = new EventEmitter<string>();\n\n\n  @ViewChild('pickerInput') public pickerInput: NgxTTitanColorPickerInputDirective;\n  @ViewChild(NgxTTitanColorPickerPaletteListComponent) public paletteList: NgxTTitanColorPickerPaletteListComponent;\n  @ViewChild('mainColor') public mainColor: NgxTTitanColorPickerSelectorDirective;\n  @ViewChild('huePicker') public huePicker: NgxTTitanColorPickerSelectorDirective;\n  @ViewChild('alphaPicker') public alphaPicker: NgxTTitanColorPickerSelectorDirective;\n\n\n  public _pickerConfig: PickerConfig = {\n    alpha: false,\n    pickerShow: false,\n    noHide: false,\n    debug: false,\n    outFormat: 'hex6',\n    inputFormat: 'hex6',\n    availPallets: ['polaris', 'material'],\n    customPallets:  [],\n  };\n  public colorInit: boolean = false;\n  public pickerOpen: boolean = false;\n  public pickerPallets: Array<Palette> = [];\n  public hsva: HSVA = {\n    hue: 0,\n    saturation: 100,\n    value: 100,\n    alpha: 1\n  };\n  public currentColor: string = 'rgb(255,0,0)';\n  public currentColorMax: string = 'rgba(255,0,0,1)';\n  public currentColorAlpha: string = 'rgba(255,0,0,1)';\n  public currentColorAlphaZero: string = 'rgba(255,0,0,0)';\n  public uuid: string = 'picker-';\n  public allowedFormats: Array<string> = ['hex6', 'hex8', 'rgb', 'rgba'];\n  public alphaFormats: Array<string> = ['hex8', 'rgba'];\n  public oldColor: string = '';\n\n  constructor(\n    public colorPickerService: NgxTTitanColorPickerService,\n    public cdr: ChangeDetectorRef\n  ) {\n    this.uuid = this.colorPickerService.getPickerUuid();\n\n  }\n\n  ngOnInit() {\n    this.validateInputParams();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if('options' in changes) {\n      this.validateInputParams();\n    }\n    if('color' in changes) {\n      if(changes.color.currentValue !== changes.color.previousValue) {\n        setTimeout(() => {\n          this.colorPickerService.colorToData(this.color, this);\n          this.setDraggersToCurrentColor();\n        }, 1);\n      }\n    }\n  }\n\n  openPicker() {\n    this.pickerOpen = true;\n    if(typeof this.paletteList !== 'undefined') {\n      this.paletteList.closePalette();\n    }\n  }\n\n\n  closePicker() {\n    this.pickerOpen = false;\n    this.cdr.detectChanges();\n  }\n\n  validateInputParams() {\n\n    if('inputFormat' in this.options) {\n      if(this.allowedFormats.indexOf(this.options.outFormat) === -1) {\n        this._pickerConfig.outFormat = 'hex6';\n        console.group(\"ngx-ttitan-color-picker\");\n        console.warn('[outFormat] must be one of this (' + this.allowedFormats.join(',') + ')');\n        console.groupEnd();\n      } else {\n        this._pickerConfig.outFormat = this.options.outFormat + '';\n      }\n    }\n    if('inputFormat' in this.options) {\n      if(this.allowedFormats.indexOf(this.options.inputFormat) === -1) {\n        this._pickerConfig.inputFormat = this._pickerConfig.outFormat + '';\n        console.group(\"ngx-ttitan-color-picker\");\n        console.warn('[inputFormat] must be one of this (' + this.allowedFormats.join(',') + ')');\n        console.groupEnd();\n      } else {\n        this._pickerConfig.inputFormat = this.options.inputFormat + '';\n      }\n    }\n    if('pickerShow' in this.options) {\n      if(this._pickerConfig.pickerShow !== this.options.pickerShow) {\n        this._pickerConfig.pickerShow = !this._pickerConfig.pickerShow;\n      }\n    }\n    if('noHide' in this.options) {\n      if(this._pickerConfig.noHide !== this.options.noHide) {\n        this._pickerConfig.noHide = !this._pickerConfig.noHide;\n      }\n    }\n    if('debug' in this.options) {\n      if(this._pickerConfig.debug !== this.options.debug) {\n        this._pickerConfig.debug = !this._pickerConfig.debug;\n      }\n    }\n    if('availPallets' in this.options) {\n      this._pickerConfig.availPallets = this.options.availPallets.filter(function(){return true;});\n    }\n    if('customPallets' in this.options) {\n      this._pickerConfig.customPallets = this.options.customPallets.filter(function(){return true;});\n    }\n\n    this.colorPickerService.preparePickerPallets(this._pickerConfig.availPallets, this._pickerConfig.customPallets, this);\n\n    this._pickerConfig.alpha = this.alphaFormats.indexOf(this._pickerConfig.outFormat) !== -1;\n    if(this._pickerConfig.pickerShow) {\n      this.openPicker();\n    }\n    this.cdr.detectChanges();\n\n  }\n\n\n  inputColorChange(color: string) {\n    this.color = color;\n    this.colorPickerService.colorToData(this.color, this);\n    this.setDraggersToCurrentColor();\n  }\n\n  updateReturnColor() {\n    this.color = this.colorPickerService.prepareReturnColor(this.hsva, this._pickerConfig.outFormat);\n\n    if(this.colorInit) {\n      if(this.oldColor !== this.color) {\n        this.oldColor = this.color + '';\n        this.colorChange.emit(this.color + '');\n      }\n    }\n    this.colorInit = true;\n  }\n\n\n  setInputValue() {\n    if(typeof this.pickerInput !== 'undefined') {\n      this.pickerInput.setInputValue(\n        this.colorPickerService.prepareReturnColor(this.hsva, this._pickerConfig.inputFormat)\n      );\n    }\n  }\n\n  setDraggersToCurrentColor() {\n\n    if(typeof this.mainColor !== 'undefined') {\n      this.mainColor.setDragger(\n        {\n          x: this.hsva.saturation,\n          y: 100 - this.hsva.value\n        }\n      );\n    }\n\n    if(typeof this.huePicker !== 'undefined') {\n      this.huePicker.setDragger({x: 0, y: Math.round(this.hsva.hue * 100 / 360)});\n    }\n\n    if(typeof this.alphaPicker !== 'undefined' && this._pickerConfig.alpha) {\n      this.alphaPicker.setDragger({x: 0, y: 100 - (this.hsva.alpha * 100)});\n    }\n    this.cdr.detectChanges();\n  }\n\n}\n\n","import {Directive, ElementRef, HostBinding, Input} from '@angular/core';\nimport {ColorPickerComponent} from \"./ngx-ttitan-color-picker.interface\";\n\n@Directive({\n  selector: '[libNgxTTitanColorPickerDragger]'\n})\nexport class NgxTTitanColorPickerDraggerDirective {\n\n  @Input('pickerPad') public pickerPad: number = 0;\n  @Input('context') public _context: ColorPickerComponent;\n\n  constructor(public elRef: ElementRef) { }\n\n\n  public setPosition(x: number, y: number, direction: string): void {\n\n    let rect = this.elRef.nativeElement.getBoundingClientRect();\n\n    if(direction == 'vertical' || direction == 'both') {\n      this.elRef.nativeElement.style.top = Math.round((y - ((rect.height) / 2))) + 'px';\n    }\n    if(direction == 'horizontal' || direction == 'both') {\n      this.elRef.nativeElement.style.left = Math.round((x - ((rect.width) / 2))) + 'px';\n    }\n\n  }\n\n}\n","import {\n  ContentChild, Directive, ElementRef, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output\n} from '@angular/core';\nimport {NgxTTitanColorPickerDraggerDirective} from \"./ngx-ttitan-color-picker-dragger.directive\";\n// import {Observable, Subscription, of} from \"rxjs\";\nimport {fromEvent, Subscription} from 'rxjs';\nimport {NgxTTitanColorPickerService} from \"./ngx-ttitan-color-picker.service\";\nimport {ColorPickerComponent, CustomPercent, CustomRect} from \"./ngx-ttitan-color-picker.interface\";\n\n\n@Directive({\n  selector: '[libNgxTTitanColorPickerSelector]',\n  exportAs: 'libNgxTTitanColorPickerSelector'\n})\nexport class NgxTTitanColorPickerSelectorDirective implements OnDestroy, OnInit{\n\n  @HostListener('mousedown', ['$event']) public onMouseDown($event) {\n    this.dragStart = true;\n    this.eventsSubscibe();\n    this.getPosition($event);\n  }\n\n  @Input('direction') public direction: string = 'both';\n  @Input('context') public _context: ColorPickerComponent;\n\n\n  @Output('change') public change: EventEmitter<CustomPercent> = new EventEmitter<CustomPercent>();\n\n  public el: HTMLElement = null;\n  public dragStart: boolean = false;\n  public globalMouseMove: Subscription = null;\n  public globalMouseUp: Subscription = null;\n\n\n  @ContentChild(NgxTTitanColorPickerDraggerDirective) public dragger: NgxTTitanColorPickerDraggerDirective = null;\n\n\n\n  constructor(\n    public elRef: ElementRef,\n    public colorPickerService: NgxTTitanColorPickerService\n  ) {\n    this.el = this.elRef.nativeElement;\n    this.direction = (['both', 'vertical', 'horizontal'].indexOf(this.direction) === -1) ? 'both' : this.direction;\n\n\n\n  }\n\n  ngOnInit() {\n\n\n  }\n\n  ngOnDestroy() {\n   // this.eventsUnSubscibe();\n  }\n\n\n  eventsSubscibe() {\n    // this.globalMouseMove = fromEvent(window, 'mousemove').subscribe((event) => {\n    //   if(this.dragStart) {\n    //     this.getPosition(<MouseEvent>event);\n    //   }\n    // });\n    // this.globalMouseUp = fromEvent(window, 'mouseup').subscribe((event) => {\n    //   if(this.dragStart) {\n    //     this.dragStart = false;\n    //     this.getPosition(<MouseEvent>event);\n    //   }\n    // });\n\n    //\n    this.globalMouseMove = this.colorPickerService.mouseMoveObservable.subscribe((event) => {\n      if(this.dragStart) {\n        this.getPosition(<MouseEvent>event);\n      }\n    });\n    this.globalMouseUp = this.colorPickerService.mouseUpObservable.subscribe((event) => {\n      if(this.dragStart) {\n        this.dragStart = false;\n        this.eventsUnSubscibe();\n        this.getPosition(<MouseEvent>event);\n      }\n    });\n  }\n  eventsUnSubscibe() {\n    if(this.globalMouseMove !== null) {\n      this.globalMouseMove.unsubscribe();\n    }\n    if(this.globalMouseUp !== null) {\n      this.globalMouseUp.unsubscribe();\n    }\n  }\n\n  public setDragger(persent: CustomPercent) {\n    if(this.dragger === null) {\n      return;\n    }\n    let position: CustomRect = this.getRect(this.el);\n    let x = Math.round(((position.width - this.dragger.pickerPad * 2) * persent.x / 100));\n    let y = Math.round(((position.height - this.dragger.pickerPad * 2) * persent.y / 100));\n    this.dragger.setPosition(\n      (x > this.dragger.pickerPad) ? x : this.dragger.pickerPad,\n      (y > this.dragger.pickerPad) ? y : this.dragger.pickerPad,\n      this.direction\n    );\n\n  }\n\n  public getPosition($event: MouseEvent) {\n    let cursorY = $event.pageY;\n    let cursorX = $event.pageX;\n    let position: CustomRect = this.getRect(this.el);\n    let percent: CustomPercent = {x: 0, y: 0};\n    if(this.direction == 'vertical' || this.direction == 'both') {\n      percent.y = Math.round((cursorY - (position.top)) * 100 / (position.height - this.dragger.pickerPad * 2));\n      if(percent.y < 0) {\n        percent.y = 0\n      } else if(percent.y > 100) {\n        percent.y = 100;\n      }\n    }\n    if(this.direction == 'horizontal' || this.direction == 'both') {\n      percent.x = Math.round((cursorX - (position.left)) * 100 / (position.width - this.dragger.pickerPad * 2));\n      if(percent.x < 0) {\n        percent.x = 0\n      } else if(percent.x > 100) {\n        percent.x = 100;\n      }\n    }\n\n    this.setDragger(percent);\n    this.change.emit(percent);\n\n  }\n\n\n\n  public getRect(elem: HTMLElement): CustomRect {\n\n    let box = elem.getBoundingClientRect();\n    let body = document.body;\n    let docEl = document.documentElement;\n    let scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;\n    let scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;\n    let clientTop = docEl.clientTop || body.clientTop || 0;\n    let clientLeft = docEl.clientLeft || body.clientLeft || 0;\n\n    return {\n      height: box.height,\n      left: box.left + scrollLeft - clientLeft,\n      top: box.top + scrollTop - clientTop,\n      width: box.width,\n    };\n  }\n\n\n\n}\n","import {\n  Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnChanges, Output,\n  SimpleChanges\n} from '@angular/core';\nimport {NgxTTitanColorPickerService} from \"./ngx-ttitan-color-picker.service\";\n\n@Directive({\n  selector: '[libNgxTTitanColorPickerInput]',\n  exportAs: 'libNgxTTitanColorPickerInput'\n})\nexport class NgxTTitanColorPickerInputDirective {\n\n  @Input('format') format: string = 'hex6';\n  @Output('inputChange') public inputChange: EventEmitter<string> = new EventEmitter<string>();\n\n\n  @HostListener('keyup') keyUp() {\n    this.inputValidate();\n  }\n  @HostListener('change') change() {\n    this.inputValidate();\n  }\n\n\n  constructor(\n    public el: ElementRef,\n    public colorPickerService: NgxTTitanColorPickerService\n  ) { }\n\n\n  setInputValue(value: string) {\n    (<HTMLInputElement>this.el.nativeElement).value = value;\n  }\n\n\n  inputValidate() {\n    let res = this.colorPickerService.validateColorFormat(\n      this.el.nativeElement.value,\n      this.format\n    );\n\n    if(res !== 'notValid') {\n      (<HTMLInputElement>this.el.nativeElement).value = res;\n      this.inputChange.emit(res);\n    }\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxTTitanColorPickerComponent } from './ngx-ttitan-color-picker.component';\nimport { NgxTTitanColorPickerSelectorDirective } from './ngx-ttitan-color-picker-selector.directive';\nimport { NgxTTitanColorPickerDraggerDirective } from './ngx-ttitan-color-picker-dragger.directive';\nimport {CommonModule} from \"@angular/common\";\nimport { NgxTTitanColorPickerInputDirective } from './ngx-ttitan-color-picker-input.directive';\nimport { NgxTTitanColorPickerPaletteListComponent } from './ngx-ttitan-color-picker-palette-list/ngx-ttitan-color-picker-palette-list.component';\nimport {NgxTTitanColorPickerService} from \"./ngx-ttitan-color-picker.service\";\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxTTitanColorPickerComponent,\n    NgxTTitanColorPickerSelectorDirective,\n    NgxTTitanColorPickerDraggerDirective,\n    NgxTTitanColorPickerInputDirective,\n    NgxTTitanColorPickerPaletteListComponent,\n  ],\n  exports: [NgxTTitanColorPickerComponent],\n  providers: [\n    NgxTTitanColorPickerService\n  ]\n})\nexport class NgxTTitanColorPickerModule { }\n"]}